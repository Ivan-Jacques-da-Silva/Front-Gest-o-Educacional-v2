// Buscar todas as matrículas
app.get('/matriculas', (req, res) => {
  const buscarMatriculasQuery = 'SELECT * FROM cp_matriculas';

  db.query(buscarMatriculasQuery, (err, result) => {
    if (err) {
      console.error('Erro ao buscar matrículas:', err);
      res.status(500).send({ msg: 'Erro ao buscar matrículas' });
    } else {
      res.send(result);
    }
  });
});

// Buscar uma matrícula específica pelo ID
app.get('/matriculas/:matriculaId', (req, res) => {
  const matriculaId = req.params.matriculaId;
  const buscarMatriculaQuery = 'SELECT * FROM cp_matriculas WHERE cp_mt_id = ?';

  db.query(buscarMatriculaQuery, [matriculaId], (err, result) => {
    if (err) {
      console.error('Erro ao buscar matrícula:', err);
      res.status(500).send({ msg: 'Erro ao buscar matrícula' });
    } else if (result.length === 0) {
      res.status(404).send({ msg: 'Matrícula não encontrada' });
    } else {
      res.send(result[0]);
    }
  });
});

app.get('/matricula/:userId', (req, res) => {
  const userId = req.params.userId;
  const query = `
    SELECT 
      cp_nome, 
      cp_cpf, 
      cp_datanascimento, 
      cp_profissao, 
      cp_estadocivil, 
      cp_end_cidade_estado, 
      cp_end_rua, 
      cp_end_num, 
      cp_whatsapp, 
      cp_telefone, 
      cp_email, 
      cp_escola_id 
    FROM cp_usuarios 
    WHERE cp_id = ?
  `;

  db.query(query, [userId], (err, result) => {
    if (err) {
      res.status(500).send({ msg: 'Erro ao buscar dados do usuário' });
    } else if (result.length > 0) {
      const userData = {
        nomeUsuario: result[0].cp_nome,
        cpfUsuario: result[0].cp_cpf,
        dataNascimento: result[0].cp_datanascimento,
        profissao: result[0].cp_profissao,
        estadoCivil: result[0].cp_estadocivil,
        endereco: `${result[0].cp_end_cidade_estado}, ${result[0].cp_end_rua}, ${result[0].cp_end_num}`,
        whatsapp: result[0].cp_whatsapp,
        telefone: result[0].cp_telefone,
        email: result[0].cp_email,
        escolaId: result[0].cp_escola_id
      };
      res.send(userData);
    } else {
      res.status(404).send({ msg: 'Usuário não encontrado' });
    }
  });
});

// Buscar todos os usuários do tipo cp_tipo_user = 5 para a matrícula
app.get('/buscarusermatricula', (req, res) => {
  const buscarUsuariosQuery = 'SELECT * FROM cp_usuarios WHERE cp_tipo_user = 5 AND cp_excluido = 0';
  // const buscarUsuariosQuery = 'SELECT cp_id, cp_nome, cp_cpf, cp_datanascimento, cp_profissao, cp_estadocivil, cp_end_cidade_estado, cp_end_rua, cp_end_num, cp_whatsapp, cp_telefone, cp_email FROM cp_usuarios WHERE cp_tipo_user = 5';

  db.query(buscarUsuariosQuery, (err, result) => {
    if (err) {
      res.status(500).send({ msg: 'Erro no servidor' });
    } else if (result.length === 0) {
      res.status(404).send({ msg: 'Nenhum usuário encontrado' });
    } else {
      res.send(result);
    }
  });
});

// Buscar um usuário do tipo cp_tipo_user = 5 para a matrícula
app.get('/buscarusermatricula/:id', (req, res) => {
  const userId = req.params.id;
  const buscarUsuarioQuery = 'SELECT * FROM cp_usuarios WHERE cp_tipo_user = 5 AND cp_excluido = 0 AND cp_id = ? LIMIT 1';

  db.query(buscarUsuarioQuery, [userId], (err, result) => {
    if (err) {
      res.status(500).send({ msg: 'Erro no servidor' });
    } else if (result.length === 0) {
      res.status(404).send({ msg: 'Usuário não encontrado' });
    } else {
      res.send(result[0]); // Retorna apenas o primeiro usuário encontrado
    }
  });
});


app.post('/cadastrar-matricula', async (req, res) => {
  console.log('Dados recebidos no backend:', req.body);
  const {
    cursoId: cp_mt_curso, usuarioId: cp_mt_usuario, cpfUsuario: cp_mt_cadastro_usuario, valorCurso: cp_mt_valor_curso,
    numeroParcelas: cp_mt_quantas_parcelas, status: cp_status_matricula, escolaId: cp_mt_escola,
    escolaridade: cp_mt_escolaridade, localNascimento: cp_mt_local_nascimento, redeSocial: cp_mt_rede_social,
    nomePai: cp_mt_nome_pai, contatoPai: cp_mt_contato_pai, nomeMae: cp_mt_nome_mae, contatoMae: cp_mt_contato_mae,
    horarioInicio: cp_mt_horario_inicio, horarioFim: cp_mt_horario_fim, nivelIdioma: cp_mt_nivel,
    primeiraDataPagamento: cp_mt_primeira_parcela, nomeUsuario: cp_mt_nome_usuario
  } = req.body;

  const newMatricula = {
    cp_mt_curso, cp_mt_usuario, cp_mt_cadastro_usuario, cp_mt_valor_curso, cp_mt_quantas_parcelas,
    cp_mt_parcelas_pagas: 0, cp_status_matricula, cp_mt_escola, cp_mt_escolaridade, cp_mt_nivel,
    cp_mt_local_nascimento, cp_mt_rede_social, cp_mt_nome_pai, cp_mt_contato_pai, cp_mt_nome_mae,
    cp_mt_contato_mae, cp_mt_horario_inicio, cp_mt_horario_fim, cp_mt_excluido: 0,
    cp_mt_primeira_parcela, cp_mt_nome_usuario
  };

  try {
    db.beginTransaction(async (err) => {
      if (err) return res.status(500).send({ msg: 'Erro ao cadastrar matrícula' });

      db.query('INSERT INTO cp_matriculas SET ?', newMatricula, async (err, result) => {
        if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao cadastrar matrícula' }));

        const matriculaId = result.insertId;
        const parcelas = [], valorParcela = parseFloat((cp_mt_valor_curso / cp_mt_quantas_parcelas).toFixed(2));
        let dataParcela = new Date(cp_mt_primeira_parcela);

        for (let i = 1; i <= cp_mt_quantas_parcelas; i++) {
          parcelas.push([matriculaId, new Date(dataParcela), 'à vencer', valorParcela]);
          dataParcela.setMonth(dataParcela.getMonth() + 1);
        }

        db.query('INSERT INTO cp_matriculaParcelas (cp_mt_id, cp_mtPar_dataParcela, cp_mtPar_status, cp_mtPar_valorParcela) VALUES ?', [parcelas], (err) => {
          if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao cadastrar matrícula' }));

          db.commit((err) => {
            if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao cadastrar matrícula' }));
            res.send({ msg: 'Matrícula cadastrada com sucesso', matriculaId });
          });
        });
      });
    });
  } catch (error) {
    res.status(500).send({ msg: 'Erro ao cadastrar matrícula' });
  }
});

app.put('/editar-matricula/:matriculaId', async (req, res) => {
  const matriculaId = req.params.matriculaId;
  const {
    cursoId, usuarioId, cpfUsuario, valorCurso, numeroParcelas, status, escolaId, escolaridade,
    localNascimento, redeSocial, nomePai, contatoPai, nomeMae, contatoMae,
    horarioInicio, horarioFim, nivelIdioma, primeiraDataPagamento, nomeUsuario
  } = req.body;

  try {
    db.beginTransaction(err => {
      if (err) return res.status(500).send({ msg: 'Erro ao editar matrícula' });

      db.query('SELECT * FROM cp_matriculas WHERE cp_mt_id = ?', [matriculaId], (err, resultado) => {
        if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao buscar matrícula' }));
        if (!resultado.length) return db.rollback(() => res.status(404).send({ msg: 'Matrícula não encontrada' }));

        const query = `UPDATE cp_matriculas SET
          cp_mt_curso=?, cp_mt_usuario=?, cp_mt_cadastro_usuario=?, cp_mt_valor_curso=?,
          cp_mt_quantas_parcelas=?, cp_status_matricula=?, cp_mt_escola=?, cp_mt_escolaridade=?,
          cp_mt_nivel=?, cp_mt_local_nascimento=?, cp_mt_rede_social=?, cp_mt_nome_pai=?,
          cp_mt_contato_pai=?, cp_mt_nome_mae=?, cp_mt_contato_mae=?, cp_mt_horario_inicio=?,
          cp_mt_horario_fim=?, cp_mt_primeira_parcela=?, cp_mt_nome_usuario=? WHERE cp_mt_id=?`;

        const valores = [cursoId, usuarioId, cpfUsuario, valorCurso, numeroParcelas, status, escolaId, escolaridade,
          nivelIdioma, localNascimento, redeSocial, nomePai, contatoPai, nomeMae, contatoMae,
          horarioInicio, horarioFim, primeiraDataPagamento, nomeUsuario, matriculaId];

        db.query(query, valores, err => {
          if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao editar matrícula' }));

          db.query('DELETE FROM cp_matriculaParcelas WHERE cp_mt_id = ?', [matriculaId], err => {
            if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao remover parcelas antigas' }));

            const valorParcela = parseFloat((valorCurso / numeroParcelas).toFixed(2));
            const [ano, mes, dia] = primeiraDataPagamento.split('-').map(Number);
            const parcelas = [];

            for (let i = 0; i < numeroParcelas; i++) {
              const d = new Date(ano, mes - 1 + i, dia);
              parcelas.push([
                matriculaId,
                `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`,
                'à vencer',
                valorParcela
              ]);
            }

            db.query(
              `INSERT INTO cp_matriculaParcelas (cp_mt_id, cp_mtPar_dataParcela, cp_mtPar_status, cp_mtPar_valorParcela) VALUES ?`,
              [parcelas],
              err => {
                if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao cadastrar parcelas' }));
                db.commit(err => {
                  if (err) return db.rollback(() => res.status(500).send({ msg: 'Erro ao concluir edição' }));
                  res.send({ msg: 'Matrícula e parcelas atualizadas com sucesso' });
                });
              }
            );
          });
        });
      });
    });
  } catch (error) {
    res.status(500).send({ msg: 'Erro inesperado ao editar matrícula' });
  }
});
